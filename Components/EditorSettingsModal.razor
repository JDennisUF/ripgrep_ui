@inject EditorSettingsService SettingsService
@inject IJSRuntime JSRuntime

<div class="modal fade" id="editorSettingsModal" tabindex="-1" aria-labelledby="editorSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editorSettingsModalLabel">Editor Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm id="editorSettingsForm" Model="@settings" OnValidSubmit="@SaveSettings">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    <div class="mb-3">
                        <label for="preferredEditor" class="form-label">Preferred Editor</label>
                        <InputSelect id="preferredEditor" class="form-select" @bind-Value="settings.PreferredEditor">
                            @foreach (var editor in EditorInfo.SupportedEditors)
                            {
                                <option value="@editor.Type">
                                    @editor.DisplayName
                                    @if (editorAvailability.ContainsKey(editor.Type))
                                    {
                                        @(editorAvailability[editor.Type] ? " ✓" : " ✗")
                                    }
                                </option>
                            }
                            <option value="@EditorType.Custom">Custom Editor</option>
                        </InputSelect>
                        <div class="form-text">
                            ✓ = Available, ✗ = Not found
                        </div>
                    </div>

                    @if (settings.PreferredEditor == EditorType.Custom)
                    {
                        <div class="mb-3">
                            <label for="customEditorPath" class="form-label">Custom Editor Path</label>
                            <InputText id="customEditorPath" class="form-control" @bind-Value="settings.CustomEditorPath" 
                                       placeholder="C:\path\to\editor.exe" />
                            <ValidationMessage For="@(() => settings.CustomEditorPath)" class="text-danger" />
                            <div class="form-text">
                                Full path to your editor executable
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="customEditorArgs" class="form-label">Custom Editor Arguments</label>
                            <InputText id="customEditorArgs" class="form-control" @bind-Value="settings.CustomEditorArgs" 
                                       placeholder="Example: &quot;&#123;0&#125;&quot; or &quot;&#123;0&#125;:&#123;1&#125;&quot;" />
                            <div class="form-text">
                                Use {0} for file path, {1} for line number. Example: <code>"{0}:{1}"</code>
                            </div>
                        </div>
                    }

                    <div class="alert alert-info">
                        <h6>How it works:</h6>
                        <ul class="mb-0">
                            <li><strong>File links</strong> → Open in preferred editor</li>
                            <li><strong>Line numbers</strong> → Open at specific line (if supported)</li>
                            <li><strong>Auto-detection</strong> → Tries multiple executable names per editor</li>
                        </ul>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" disabled="@isSaving" form="editorSettingsForm">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                    }
                    Save Settings
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private EditorSettings settings = new();
    private Dictionary<EditorType, bool> editorAvailability = new();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        settings = SettingsService.GetSettings();
        editorAvailability = await SettingsService.CheckEditorAvailabilityAsync();
    }

    public async Task ShowAsync()
    {
        settings = SettingsService.GetSettings();
        editorAvailability = await SettingsService.CheckEditorAvailabilityAsync();
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('editorSettingsModal')).show()");
    }

    private async Task SaveSettings()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            await SettingsService.SaveSettingsAsync(settings);
            await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getOrCreateInstance('#editorSettingsModal').hide()");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to save settings: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}